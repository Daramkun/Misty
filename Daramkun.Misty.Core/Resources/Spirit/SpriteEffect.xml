<?xml version="1.0" encoding="utf-8" ?>
<shaders>
  <shader type="vertex" language="glsl" version="1.3">
    <![CDATA[
layout(location = 0) in vec3 i_position;
layout(location = 1) in vec4 i_overlay;
layout(location = 2) in vec2 i_texture;

uniform mat4 projectionMatrix;
uniform mat4 worldMatrix;

out vec4 o_overlay;
out vec2 o_texture;

void main () {
    vec4 pos = getVertexPos(vec4(i_position, 1));
    pos = worldMatrix * pos;
    pos = projectionMatrix * pos;

    gl_Position = pos;

    o_overlay = i_overlay;
    o_texture = i_texture;
}
    ]]>
  </shader>
  <shader type="pixel" language="glsl" version="1.3">
    <![CDATA[
in vec4 o_overlay;
in vec2 o_texture;

uniform sampler2D texture0;

void main () {
    gl_FragColor = texture2D ( texture0, getTexUV(o_texture) ) * o_overlay;
}
    ]]>
  </shader>

  <shader type="vertex" language="glsl" version="1.2">
    <![CDATA[
attribute vec3 i_position;
attribute vec4 i_overlay;
attribute vec2 i_texture;

uniform mat4 projectionMatrix;
uniform mat4 worldMatrix;

varying vec4 o_overlay;
varying vec2 o_texture;

void main () {
    vec4 pos = getVertexPos(vec4(i_position, 1));
    pos = getVertexPos(pos);
    pos = worldMatrix * pos;
    pos = projectionMatrix * pos;

    gl_Position = pos;

    o_overlay = i_overlay;
    o_texture = i_texture;
}
    ]]>
  </shader>
  <shader type="pixel" language="glsl" version="1.2">
    <![CDATA[
varying vec4 o_overlay;
varying vec2 o_texture;

uniform sampler2D texture0;

void main () {
    gl_FragColor = texture2D ( texture0, getTexUV(o_texture) ) * o_overlay;
}
    ]]>
  </shader>
  
  <shader type="vertex" language="glsles" version="1.2">
    <![CDATA[
attribute vec3 i_position;
attribute vec4 i_overlay;
attribute vec2 i_texture;

uniform mat4 projectionMatrix;
uniform mat4 worldMatrix;

varying vec4 o_overlay;
varying vec2 o_texture;

void main () {
    vec4 pos = getVertexPos(vec4(i_position, 1));
    pos = worldMatrix * pos;
    pos = projectionMatrix * pos;

    gl_Position = pos;

    o_overlay = i_overlay;
    o_texture = i_texture;
}
    ]]>
  </shader>
  <shader type="pixel" language="glsles" version="1.2">
    <![CDATA[
varying vec4 o_overlay;
varying vec2 o_texture;

uniform sampler2D texture0;

void main () {
    gl_FragColor = texture2D ( texture0, getTexUV(o_texture) ) * o_overlay;
}
    ]]>
  </shader>

  <shader type="vertex" language="hlsl" version="2.0">
    <![CDATA[
float4x4 projectionMatrix;
float4x4 worldMatrix;

struct VS_INPUT
{
   float2 i_position : POSITION;
   float4 i_overlay : COLOR;
   float2 i_texture : TEXCOORD0;
};

struct PS_INPUT
{
   float4 o_position : POSITION;
   float4 o_overlay : COLOR;
   float2 o_texture : TEXCOORD0;
};

PS_INPUT vs_main(VS_INPUT input)
{
   PS_INPUT output;
   output.o_position = float4(input.i_position, 1, 1);
   output.o_position = mul(output.o_position, worldMatrix);
   output.o_position = mul(output.o_position, projectionMatrix);
   output.o_overlay = input.i_overlay;
   output.o_texture = input.i_texture;
   return output;
}
    ]]>
  </shader>
  <shader type="pixel" language="hlsl" version="2.0">
    <![CDATA[
sampler2D texture0;

struct PS_INPUT
{
   float4 o_position : POSITION;
   float4 o_overlay : COLOR;
   float2 o_texture : TEXCOORD0;
};

float4 ps_main(PS_INPUT input) : COLOR
{
   return tex2D ( texture0, input.o_texture ) * input.o_overlay;
}
    ]]>
  </shader>
</shaders>